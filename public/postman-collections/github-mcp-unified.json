{
  "info": {
    "name": "GitHub MCP - Comprehensive Repository Analysis",
    "description": "Comprehensive GitHub MCP integration to analyze repositories, issues, pull requests, and gists. Perfect for repository health checks and analytics.\n\nüîß **Setup Instructions:**\n1. Set your `github_token` variable to your GitHub Personal Access Token\n2. Set your `repo_owner` and `repo_name` variables\n3. Set `top_n_gists` to control how many gists to fetch\n4. Run requests in order for best results\n\n‚úÖ **What You Get:**\n- Repository information and statistics\n- Recent issues (open and closed)\n- Active pull requests\n- Top N gists from the user\n- Comprehensive repository health report",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "github_token",
      "value": "your_github_personal_access_token_here",
      "type": "string"
    },
    {
      "key": "repo_owner",
      "value": "arun-gupta",
      "type": "string"
    },
    {
      "key": "repo_name",
      "value": "llm-lab",
      "type": "string"
    },
    {
      "key": "top_n_gists",
      "value": "5",
      "type": "string"
    },
    {
      "key": "mcp_session_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Initialize MCP Session",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"tools\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"postman-mcp-client\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Extract session ID from response headers",
              "const sessionId = pm.response.headers.get('mcp-session-id');",
              "if (sessionId) {",
              "    pm.environment.set('mcp_session_id', sessionId);",
              "    console.log('‚úÖ MCP Session initialized:', sessionId);",
              "} else {",
              "    console.log('‚ö†Ô∏è No session ID found in response');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Get Repository Information",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_repositories\",\n    \"arguments\": {\n      \"query\": \"repo:{{repo_owner}}/{{repo_name}}\",\n      \"perPage\": 1\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Parse and display repository information",
              "const response = pm.response.json();",
              "if (response.result && response.result.content) {",
              "    try {",
              "        const repos = JSON.parse(response.result.content[0].text);",
              "        if (repos.length > 0) {",
              "            const repo = repos[0];",
              "            console.log('‚úÖ Repository found:', repo.full_name);",
              "            console.log('   Description:', repo.description);",
              "            console.log('   Stars:', repo.stargazers_count);",
              "            console.log('   Forks:', repo.forks_count);",
              "            console.log('   Language:', repo.language);",
              "            console.log('   Created:', repo.created_at);",
              "            console.log('   Updated:', repo.updated_at);",
              "        } else {",
              "            console.log('‚ö†Ô∏è Repository not found');",
              "        }",
              "    } catch (e) {",
              "        console.log('‚ö†Ô∏è Could not parse repository data');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Get Repository Issues",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_issues\",\n    \"arguments\": {\n      \"query\": \"repo:{{repo_owner}}/{{repo_name}} is:issue\",\n      \"perPage\": 10\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Parse and display issues information",
              "const response = pm.response.json();",
              "if (response.result && response.result.content) {",
              "    try {",
              "        const issues = JSON.parse(response.result.content[0].text);",
              "        console.log('‚úÖ Found', issues.length, 'issues');",
              "        ",
              "        const openIssues = issues.filter(issue => issue.state === 'open');",
              "        const closedIssues = issues.filter(issue => issue.state === 'closed');",
              "        ",
              "        console.log('   Open issues:', openIssues.length);",
              "        console.log('   Closed issues:', closedIssues.length);",
              "        ",
              "        // Show recent issues",
              "        issues.slice(0, 3).forEach((issue, index) => {",
              "            console.log(`   Issue ${index + 1}: ${issue.title} (${issue.state})`);",
              "        });",
              "    } catch (e) {",
              "        console.log('‚ö†Ô∏è Could not parse issues data');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "4. Get Pull Requests",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_issues\",\n    \"arguments\": {\n      \"query\": \"repo:{{repo_owner}}/{{repo_name}} is:pr\",\n      \"perPage\": 10\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Parse and display pull requests information",
              "const response = pm.response.json();",
              "if (response.result && response.result.content) {",
              "    try {",
              "        const prs = JSON.parse(response.result.content[0].text);",
              "        console.log('‚úÖ Found', prs.length, 'pull requests');",
              "        ",
              "        const openPRs = prs.filter(pr => pr.state === 'open');",
              "        const closedPRs = prs.filter(pr => pr.state === 'closed');",
              "        ",
              "        console.log('   Open PRs:', openPRs.length);",
              "        console.log('   Closed PRs:', closedPRs.length);",
              "        ",
              "        // Show recent PRs",
              "        prs.slice(0, 3).forEach((pr, index) => {",
              "            console.log(`   PR ${index + 1}: ${pr.title} (${pr.state})`);",
              "        });",
              "    } catch (e) {",
              "        console.log('‚ö†Ô∏è Could not parse pull requests data');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "5. Get Top N Gists",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_repositories\",\n    \"arguments\": {\n      \"query\": \"user:{{repo_owner}} gist\",\n      \"perPage\": {{top_n_gists}}\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Parse and display gists information",
              "const response = pm.response.json();",
              "if (response.result && response.result.content) {",
              "    try {",
              "        const gists = JSON.parse(response.result.content[0].text);",
              "        console.log('‚úÖ Found', gists.length, 'top gists for', pm.environment.get('repo_owner'));",
              "        ",
              "        // Show gist details",
              "        gists.forEach((gist, index) => {",
              "            console.log(`   Gist ${index + 1}: ${gist.name || gist.full_name} (${gist.stargazers_count} stars)`);",
              "            console.log(`      Description: ${gist.description || 'No description'}`);",
              "            console.log(`      Language: ${gist.language || 'Multiple'}`);",
              "        });",
              "    } catch (e) {",
              "        console.log('‚ö†Ô∏è Could not parse gists data');",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "6. Generate Repository Health Report",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_repositories\",\n    \"arguments\": {\n      \"query\": \"repo:{{repo_owner}}/{{repo_name}}\",\n      \"perPage\": 1\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Generate comprehensive repository health report",
              "const response = pm.response.json();",
              "if (response.result && response.result.content) {",
              "    try {",
              "        const repos = JSON.parse(response.result.content[0].text);",
              "        if (repos.length > 0) {",
              "            const repo = repos[0];",
              "            ",
              "            console.log('üìä REPOSITORY HEALTH REPORT');",
              "            console.log('========================');",
              "            console.log(`Repository: ${repo.full_name}`);",
              "            console.log(`Description: ${repo.description || 'No description'}`);",
              "            console.log(`Language: ${repo.language || 'Multiple'}`);",
              "            console.log(`Stars: ${repo.stargazers_count}`);",
              "            console.log(`Forks: ${repo.forks_count}`);",
              "            console.log(`Watchers: ${repo.watchers_count}`);",
              "            console.log(`Open Issues: ${repo.open_issues_count}`);",
              "            console.log(`Created: ${repo.created_at}`);",
              "            console.log(`Last Updated: ${repo.updated_at}`);",
              "            console.log(`License: ${repo.license?.name || 'No license'}`);",
              "            console.log(`Archived: ${repo.archived ? 'Yes' : 'No'}`);",
              "            console.log(`Private: ${repo.private ? 'Yes' : 'No'}`);",
              "            ",
              "            // Health indicators",
              "            const healthScore = calculateHealthScore(repo);",
              "            console.log(`\\nüè• HEALTH SCORE: ${healthScore}/100`);",
              "            ",
              "            if (healthScore >= 80) {",
              "                console.log('‚úÖ Repository is in excellent health!');",
              "            } else if (healthScore >= 60) {",
              "                console.log('‚ö†Ô∏è Repository needs some attention');",
              "            } else {",
              "                console.log('‚ùå Repository needs immediate attention');",
              "            }",
              "        }",
              "    } catch (e) {",
              "        console.log('‚ö†Ô∏è Could not generate health report');",
              "    }",
              "}",
              "",
              "function calculateHealthScore(repo) {",
              "    let score = 100;",
              "    ",
              "    // Deduct points for issues",
              "    if (repo.open_issues_count > 10) score -= 20;",
              "    else if (repo.open_issues_count > 5) score -= 10;",
              "    ",
              "    // Deduct points for no description",
              "    if (!repo.description) score -= 10;",
              "    ",
              "    // Deduct points for no license",
              "    if (!repo.license) score -= 15;",
              "    ",
              "    // Deduct points for archived repos",
              "    if (repo.archived) score -= 30;",
              "    ",
              "    // Add points for stars",
              "    if (repo.stargazers_count > 100) score += 10;",
              "    else if (repo.stargazers_count > 10) score += 5;",
              "    ",
              "    return Math.max(0, Math.min(100, score));",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
