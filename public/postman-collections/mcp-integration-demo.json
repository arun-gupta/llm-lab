{
  "info": {
    "name": "MCP Server Integration Demo",
    "description": "Demonstrates how to integrate popular MCP servers with Postman for enhanced API testing and automation.\n\nðŸ”§ **Built-in MCP Client Library**\nThis collection includes a complete MCP client library that works out of the box. No external setup required!\n\nðŸ“‹ **What's Included**\nâ€¢ GitHub MCP Integration (repositories, issues)\nâ€¢ File System MCP (read files, search files)\nâ€¢ Web Search MCP (search, weather data)\nâ€¢ Database MCP (query execution)\nâ€¢ Multi-MCP Orchestration (combine multiple servers)\n\nâœ… **Ready to Use**\nâ€¢ No MCP servers needed - uses built-in mock data\nâ€¢ All scripts work immediately in Postman\nâ€¢ Realistic demo data for testing\nâ€¢ Comprehensive error handling\n\nðŸŽ¯ **Perfect for Learning**\nâ€¢ See how MCP integration works in practice\nâ€¢ Understand the MCP client-server pattern\nâ€¢ Learn Postman script best practices\nâ€¢ Explore multi-server orchestration",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "mcp_github_url",
      "value": "ws://localhost:3001",
      "type": "string"
    },
    {
      "key": "mcp_filesystem_url",
      "value": "ws://localhost:3002", 
      "type": "string"
    },
    {
      "key": "mcp_web_search_url",
      "value": "ws://localhost:3003",
      "type": "string"
    },
    {
      "key": "mcp_database_url",
      "value": "ws://localhost:3004",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// MCP Client Library for Postman - Collection Level",
          "if (typeof MCPClient === 'undefined') {",
          "  class MCPClient {",
          "    constructor(serverUrl) {",
          "      this.serverUrl = serverUrl;",
          "      this.connected = false;",
          "    }",
          "",
          "    async connect() {",
          "      this.connected = true;",
          "      return Promise.resolve();",
          "    }",
          "",
          "    async call(toolName, params = {}) {",
          "      if (!this.connected) {",
          "        throw new Error('MCP client not connected');",
          "      }",
          "",
          "      // Return mock data for demo purposes",
          "      return this.getMockData(toolName, params);",
          "    }",
          "",
          "    getMockData(toolName, params) {",
          "      switch (toolName) {",
          "        case 'github/list_repositories':",
          "          return [",
          "            {",
          "              name: 'llm-lab',",
          "              full_name: `${params.owner || 'user'}/llm-lab`,", 
          "              description: 'LLM testing and comparison tool with Postman integration',",
          "              html_url: `https://github.com/${params.owner || 'user'}/llm-lab`,",
          "              stargazers_count: 42,",
          "              language: 'TypeScript'",
          "            },",
          "            {",
          "              name: 'mcp-demo',",
          "              full_name: `${params.owner || 'user'}/mcp-demo`,",
          "              description: 'Model Context Protocol demonstration project',",
          "              html_url: `https://github.com/${params.owner || 'user'}/mcp-demo`,",
          "              stargazers_count: 15,",
          "              language: 'JavaScript'",
          "          }",
          "        ];",
          "        case 'github/create_issue':",
          "          return {",
          "            number: Math.floor(Math.random() * 1000) + 1,",
          "            title: params.title || 'Test Issue',",
          "            body: params.body || 'Issue created via MCP integration',",
          "            state: 'open',",
          "            created_at: new Date().toISOString(),",
          "            html_url: `https://github.com/${params.owner || 'user'}/repo/issues/${Math.floor(Math.random() * 1000) + 1}`",
          "          };",
          "        case 'filesystem/read_file':",
          "          return {",
          "            content: 'This is mock file content from MCP filesystem server.',",
          "            path: params.path || '/example/file.txt',",
          "            size: 1024,",
          "            modified: new Date().toISOString()",
          "          };",
          "        case 'filesystem/search_files':",
          "          return [",
          "            {",
          "              name: 'example1.txt',",
          "              path: '/docs/example1.txt',",
          "              size: 512,",
          "              type: 'file'",
          "            },",
          "            {",
          "              name: 'example2.js',",
          "              path: '/src/example2.js',",
          "              size: 1024,",
          "              type: 'file'",
          "            }",
          "          ];",
          "        case 'web_search/search':",
          "          return [",
          "            {",
          "              title: `Search results for: ${params.query || 'test'}`,",
          "              url: 'https://example.com/result1',",
          "              snippet: 'This is a mock search result from MCP web search server.',",
          "              source: 'MCP Web Search'",
          "            },",
          "            {",
          "              title: `Another result for: ${params.query || 'test'}`,",
          "              url: 'https://example.com/result2',",
          "              snippet: 'Another mock search result demonstrating MCP integration.',",
          "              source: 'MCP Web Search'",
          "            }",
          "          ];",
          "        case 'web_search/get_weather':",
          "          return {",
          "            location: params.location || 'San Francisco',",
          "            temperature: 72,",
          "            condition: 'Sunny',",
          "            humidity: 45,",
          "            wind_speed: 8,",
          "            source: 'MCP Weather Service'",
          "          };",
          "        case 'database/query':",
          "          return {",
          "            query: params.query || 'SELECT * FROM users',",
          "            results: [",
          "              { id: 1, name: 'John Doe', email: 'john@example.com' },",
          "              { id: 2, name: 'Jane Smith', email: 'jane@example.com' }",
          "            ],",
          "            row_count: 2,",
          "            execution_time: '0.05s'",
          "          };",
          "        default:",
          "          return {",
          "            message: `Mock data for ${toolName}`,",
          "            params: params,",
          "            timestamp: new Date().toISOString()",
          "          };",
          "      }",
          "    }",
          "",
          "    disconnect() {",
          "      this.connected = false;",
          "    }",
          "  }",
          "",
          "  // Make MCPClient available globally in Postman",
          "  if (typeof pm !== 'undefined') {",
          "    pm.globals.set('MCPClient', MCPClient.toString());",
          "  }",
          "}",
          "",
          "// Ensure MCPClient is available for this request",
          "if (typeof MCPClient === 'undefined' && typeof pm !== 'undefined') {",
          "  const MCPClientString = pm.globals.get('MCPClient');",
          "  if (MCPClientString) {",
          "    eval('MCPClient = ' + MCPClientString);",
          "  }",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "GitHub MCP Integration",
      "item": [
        {
          "name": "List Repositories",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"owner\": \"arun-gupta\",\n  \"type\": \"all\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/github/list_repositories",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "github", "list_repositories"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Ensure MCPClient is available",
                  "if (typeof MCPClient === 'undefined') {",
                  "  // Define MCPClient if not already defined",
                  "  class MCPClient {",
                  "    constructor(serverUrl) {",
                  "      this.serverUrl = serverUrl;",
                  "      this.connected = false;",
                  "    }",
                  "",
                  "    async connect() {",
                  "      this.connected = true;",
                  "      return Promise.resolve();",
                  "    }",
                  "",
                  "    async call(toolName, params = {}) {",
                  "      if (!this.connected) {",
                  "        throw new Error('MCP client not connected');",
                  "      }",
                  "",
                  "      // Return mock data for demo purposes",
                  "      return this.getMockData(toolName, params);",
                  "    }",
                  "",
                  "    getMockData(toolName, params) {",
                  "      switch (toolName) {",
                  "        case 'github/list_repositories':",
                  "          return [",
                  "            {",
                  "              name: 'llm-lab',",
                  "              full_name: `${params.owner || 'user'}/llm-lab`,", 
                  "              description: 'LLM testing and comparison tool with Postman integration',",
                  "              html_url: `https://github.com/${params.owner || 'user'}/llm-lab`,",
                  "              stargazers_count: 42,",
                  "              language: 'TypeScript'",
                  "            },",
                  "            {",
                  "              name: 'mcp-demo',",
                  "              full_name: `${params.owner || 'user'}/mcp-demo`,",
                  "              description: 'Model Context Protocol demonstration project',",
                  "              html_url: `https://github.com/${params.owner || 'user'}/mcp-demo`,",
                  "              stargazers_count: 15,",
                  "              language: 'JavaScript'",
                  "            }",
                  "          ];",
                  "        default:",
                  "          return {",
                  "            message: `Mock data for ${toolName}`,",
                  "            params: params,",
                  "            timestamp: new Date().toISOString()",
                  "          };",
                  "      }",
                  "    }",
                  "",
                  "    disconnect() {",
                  "      this.connected = false;",
                  "    }",
                  "  }",
                  "}",
                  "",
                  "// MCP Client for GitHub integration",
                  "try {",
                  "  const mcpClient = new MCPClient(pm.environment.get('mcp_github_url'));",
                  "  await mcpClient.connect();",
                  "  ",
                  "  const repos = await mcpClient.call('github/list_repositories', {",
                  "    owner: 'arun-gupta',",
                  "    type: 'all'",
                  "  });",
                  "",
                  "  // Use the MCP data in the request",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    repositories: repos,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'MCP GitHub Server',",
                  "    owner: 'arun-gupta'",
                  "  });",
                  "",
                  "  console.log('MCP GitHub data:', repos);",
                  "  pm.environment.set('github_repos_count', repos.length);",
                  "} catch (error) {",
                  "  console.error('MCP GitHub error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    owner: 'arun-gupta',",
                  "    type: 'all',",
                  "    error: 'MCP integration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has MCP data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('repositories');",
                  "  pm.expect(response.repositories).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is reasonable', function () {",
                  "  pm.expect(pm.response.responseTime).to.be.below(60000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Issue with MCP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Issue via MCP\",\n  \"body\": \"This issue was created using MCP integration\",\n  \"labels\": [\"mcp\", \"postman\"]\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/github/create_issue",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "github", "create_issue"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// MCP Client for GitHub issue creation",
                  "try {",
                  "  const mcpClient = new MCPClient(pm.environment.get('mcp_github_url'));",
                  "  await mcpClient.connect();",
                  "  ",
                  "  const issue = await mcpClient.call('github/create_issue', {",
                  "    title: 'Test Issue via MCP',",
                  "    body: 'This issue was created using MCP integration',",
                  "    labels: ['mcp', 'postman']",
                  "  });",
                  "",
                  "  // Use the MCP data in the request",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    issue: issue,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'MCP GitHub Server'",
                  "  });",
                  "",
                  "  console.log('MCP GitHub issue:', issue);",
                  "  pm.environment.set('last_issue_number', issue.number);",
                  "} catch (error) {",
                  "  console.error('MCP GitHub error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    title: 'Test Issue via MCP',",
                  "    body: 'This issue was created using MCP integration',",
                  "    labels: ['mcp', 'postman'],",
                  "    error: 'MCP integration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has issue data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('issue');",
                  "  pm.expect(response.issue).to.have.property('number');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "File System MCP Integration",
      "item": [
        {
          "name": "Read File with MCP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"path\": \"/example/file.txt\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/filesystem/read_file",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "filesystem", "read_file"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// MCP Client for File System integration",
                  "try {",
                  "  const mcpClient = new MCPClient(pm.environment.get('mcp_filesystem_url'));",
                  "  await mcpClient.connect();",
                  "  ",
                  "  const fileContent = await mcpClient.call('filesystem/read_file', {",
                  "    path: '/example/file.txt'",
                  "  });",
                  "",
                  "  // Use the MCP data in the request",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    file: fileContent,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'MCP File System Server'",
                  "  });",
                  "",
                  "  console.log('MCP File System data:', fileContent);",
                  "} catch (error) {",
                  "  console.error('MCP File System error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    path: '/example/file.txt',",
                  "    error: 'MCP integration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has file data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('file');",
                  "  pm.expect(response.file).to.have.property('content');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Search Files with MCP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"pattern\": \"*.txt\",\n  \"directory\": \"/docs\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/filesystem/search_files",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "filesystem", "search_files"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// MCP Client for File System search",
                  "try {",
                  "  const mcpClient = new MCPClient(pm.environment.get('mcp_filesystem_url'));",
                  "  await mcpClient.connect();",
                  "  ",
                  "  const files = await mcpClient.call('filesystem/search_files', {",
                  "    pattern: '*.txt',",
                  "    directory: '/docs'",
                  "  });",
                  "",
                  "  // Use the MCP data in the request",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    files: files,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'MCP File System Server'",
                  "  });",
                  "",
                  "  console.log('MCP File System search results:', files);",
                  "  pm.environment.set('files_found_count', files.length);",
                  "} catch (error) {",
                  "  console.error('MCP File System error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    pattern: '*.txt',",
                  "    directory: '/docs',",
                  "    error: 'MCP integration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has files array', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('files');",
                  "  pm.expect(response.files).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Web Search MCP Integration",
      "item": [
        {
          "name": "Search Web with MCP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"Model Context Protocol\",\n  \"max_results\": 5\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/web_search/search",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "web_search", "search"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// MCP Client for Web Search integration",
                  "try {",
                  "  const mcpClient = new MCPClient(pm.environment.get('mcp_web_search_url'));",
                  "  await mcpClient.connect();",
                  "  ",
                  "  const searchResults = await mcpClient.call('web_search/search', {",
                  "    query: 'Model Context Protocol',",
                  "    max_results: 5",
                  "  });",
                  "",
                  "  // Use the MCP data in the request",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    results: searchResults,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'MCP Web Search Server'",
                  "  });",
                  "",
                  "  console.log('MCP Web Search results:', searchResults);",
                  "  pm.environment.set('search_results_count', searchResults.length);",
                  "} catch (error) {",
                  "  console.error('MCP Web Search error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    query: 'Model Context Protocol',",
                  "    max_results: 5,",
                  "    error: 'MCP integration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has search results', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('results');",
                  "  pm.expect(response.results).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Weather with MCP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"location\": \"San Francisco\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/web_search/get_weather",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "web_search", "get_weather"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// MCP Client for Weather integration",
                  "try {",
                  "  const mcpClient = new MCPClient(pm.environment.get('mcp_web_search_url'));",
                  "  await mcpClient.connect();",
                  "  ",
                  "  const weather = await mcpClient.call('web_search/get_weather', {",
                  "    location: 'San Francisco'",
                  "  });",
                  "",
                  "  // Use the MCP data in the request",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    weather: weather,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'MCP Web Search Server'",
                  "  });",
                  "",
                  "  console.log('MCP Weather data:', weather);",
                  "  pm.environment.set('current_temperature', weather.temperature);",
                  "} catch (error) {",
                  "  console.error('MCP Weather error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    location: 'San Francisco',",
                  "    error: 'MCP integration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has weather data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('weather');",
                  "  pm.expect(response.weather).to.have.property('temperature');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Database MCP Integration",
      "item": [
        {
          "name": "Query Database with MCP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"SELECT * FROM users WHERE active = true\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/database/query",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "database", "query"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// MCP Client for Database integration",
                  "try {",
                  "  const mcpClient = new MCPClient(pm.environment.get('mcp_database_url'));",
                  "  await mcpClient.connect();",
                  "  ",
                  "  const results = await mcpClient.call('database/query', {",
                  "    query: 'SELECT * FROM users WHERE active = true'",
                  "  });",
                  "",
                  "  // Use the MCP data in the request",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    query_result: results,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'MCP Database Server'",
                  "  });",
                  "",
                  "  console.log('MCP Database results:', results);",
                  "  pm.environment.set('query_row_count', results.row_count);",
                  "} catch (error) {",
                  "  console.error('MCP Database error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    query: 'SELECT * FROM users WHERE active = true',",
                  "    error: 'MCP integration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has query results', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('query_result');",
                  "  pm.expect(response.query_result).to.have.property('results');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Multi-MCP Orchestration",
      "item": [
        {
          "name": "Orchestrate Multiple MCP Servers",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"workflow\": \"github_repos_and_weather\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/mcp/orchestrate",
              "host": ["{{base_url}}"],
              "path": ["api", "mcp", "orchestrate"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Multi-MCP Orchestration Example",
                  "try {",
                  "  const githubMCP = new MCPClient(pm.environment.get('mcp_github_url'));",
                  "  const filesystemMCP = new MCPClient(pm.environment.get('mcp_filesystem_url'));",
                  "  const webSearchMCP = new MCPClient(pm.environment.get('mcp_web_search_url'));",
                  "  ",
                  "  // Connect to all MCP servers",
                  "  await Promise.all([",
                  "    githubMCP.connect(),",
                  "    filesystemMCP.connect(),",
                  "    webSearchMCP.connect()",
                  "  ]);",
                  "  ",
                  "  // Orchestrate multiple MCP calls",
                  "  const [repos, files, weather] = await Promise.all([",
                  "    githubMCP.call('github/list_repositories', { owner: 'arun-gupta' }),",
                  "    filesystemMCP.call('filesystem/search_files', { pattern: '*.md' }),",
                  "    webSearchMCP.call('web_search/get_weather', { location: 'San Francisco' })",
                  "  ]);",
                  "  ",
                  "  // Combine results",
                  "  const orchestratedData = {",
                  "    github: { repositories: repos },",
                  "    filesystem: { files: files },",
                  "    weather: weather,",
                  "    timestamp: new Date().toISOString(),",
                  "    source: 'Multi-MCP Orchestration'",
                  "  };",
                  "  ",
                  "  // Use the orchestrated data in the request",
                  "  pm.request.body.raw = JSON.stringify(orchestratedData);",
                  "  ",
                  "  console.log('Multi-MCP orchestration result:', orchestratedData);",
                  "  ",
                  "  // Clean up connections",
                  "  githubMCP.disconnect();",
                  "  filesystemMCP.disconnect();",
                  "  webSearchMCP.disconnect();",
                  "} catch (error) {",
                  "  console.error('Multi-MCP orchestration error:', error);",
                  "  // Fallback to original request body",
                  "  pm.request.body.raw = JSON.stringify({",
                  "    workflow: 'github_repos_and_weather',",
                  "    error: 'Multi-MCP orchestration failed, using fallback'",
                  "  });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status is 200', function () {",
                  "  pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has orchestrated data', function () {",
                  "  const response = pm.response.json();",
                  "  pm.expect(response).to.have.property('github');",
                  "  pm.expect(response).to.have.property('filesystem');",
                  "  pm.expect(response).to.have.property('weather');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
