{
  "info": {
    "name": "Ultra-Fast MCP Optimized - Your Repos",
    "description": "Optimized MCP server integration that automatically fetches YOUR personal GitHub repositories. The collection automatically gets your username from your auth token, so you only need to set your GitHub token. Faster session management and better error handling to avoid 31+ second delays.\n\nüîß **Setup Instructions:**\n1. Set your `github_token` variable to your GitHub Personal Access Token\n2. Run 'Initialize MCP Session' first\n3. Run 'Get My User Info First' to automatically set your username\n4. Then run any of the repository requests to get your personal repos\n\n‚úÖ **No manual username setup required!**",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "github_token",
      "value": "{{$randomUUID}}",
      "type": "string"
    },
    {
      "key": "github_username",
      "value": "your-github-username",
      "type": "string"
    },
    {
      "key": "mcp_session_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "mcp_timeout",
      "value": "10000",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Initialize MCP Session (Optimized)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"tools\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"postman-mcp-client\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Set a shorter timeout for faster failure detection",
              "pm.request.timeout = parseInt(pm.environment.get('mcp_timeout') || '10000');",
              "",
              "// Clear any existing session ID",
              "pm.environment.set('mcp_session_id', '');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Extract session ID from response headers",
              "const sessionId = pm.response.headers.get('mcp-session-id');",
              "if (sessionId) {",
              "    pm.environment.set('mcp_session_id', sessionId);",
              "    console.log('‚úÖ MCP Session initialized:', sessionId);",
              "} else {",
              "    console.log('‚ö†Ô∏è No session ID found in response');",
              "}",
              "",
              "// Check response time",
              "const responseTime = pm.response.responseTime;",
              "console.log('‚è±Ô∏è Response time:', responseTime + 'ms');",
              "if (responseTime > 5000) {",
              "    console.log('‚ö†Ô∏è Slow response - consider using Direct API collection');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get My User Info First",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_me\",\n    \"arguments\": {}\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Check if we have a session ID",
              "const sessionId = pm.environment.get('mcp_session_id');",
              "if (!sessionId) {",
              "    console.log('‚ö†Ô∏è No session ID - run Initialize first');",
              "    return;",
              "}",
              "",
              "// Set timeout",
              "pm.request.timeout = parseInt(pm.environment.get('mcp_timeout') || '10000');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "try {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.result && jsonData.result.content) {",
              "        const content = jsonData.result.content[0];",
              "        if (content.text) {",
              "            const data = JSON.parse(content.text);",
              "            console.log('üë§ User Info:');",
              "            console.log('   Login:', data.login);",
              "            console.log('   ID:', data.id);",
              "            console.log('   Name:', data.name || 'N/A');",
              "            console.log('   Email:', data.email || 'N/A');",
              "",
              "            // Set the username for other requests",
              "            pm.environment.set('github_username', data.login);",
              "            console.log('‚úÖ Set github_username to:', data.login);",
              "        }",
              "    }",
              "} catch (error) {",
              "    console.log('‚ùå Error parsing response:', error.message);",
              "}",
              "",
              "// Check response time",
              "const responseTime = pm.response.responseTime;",
              "console.log('‚è±Ô∏è Response time:', responseTime + 'ms');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get My Repos (3) - MCP Optimized",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_repositories\",\n    \"arguments\": {\n      \"query\": \"user:{{github_username}}\",\n      \"perPage\": 3,\n      \"sort\": \"updated\",\n      \"order\": \"desc\"\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Check if we have a session ID",
              "const sessionId = pm.environment.get('mcp_session_id');",
              "if (!sessionId) {",
              "    console.log('‚ö†Ô∏è No session ID - run Initialize first');",
              "    return;",
              "}",
              "",
              "// Set timeout",
              "pm.request.timeout = parseInt(pm.environment.get('mcp_timeout') || '10000');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "try {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.result && jsonData.result.content) {",
              "        const content = jsonData.result.content[0];",
              "        if (content.text) {",
              "            const data = JSON.parse(content.text);",
              "            console.log('üìä Found', data.total_count, 'of your repositories');",
              "            console.log('üìã Showing', data.items.length, 'repositories (most recently updated):');",
              "            data.items.forEach((repo, index) => {",
              "                console.log(`${index + 1}. ${repo.full_name} (${repo.language || 'No language'})`);",
              "                console.log(`   Updated: ${repo.updated_at}, Stars: ${repo.stargazers_count}`);",
              "            });",
              "        }",
              "    }",
              "} catch (error) {",
              "    console.log('‚ùå Error parsing response:', error.message);",
              "}",
              "",
              "// Check response time",
              "const responseTime = pm.response.responseTime;",
              "console.log('‚è±Ô∏è Response time:', responseTime + 'ms');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get My Repos (5) - MCP Optimized",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 4,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_repositories\",\n    \"arguments\": {\n      \"query\": \"user:{{github_username}}\",\n      \"perPage\": 5,\n      \"sort\": \"stars\",\n      \"order\": \"desc\"\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Check if we have a session ID",
              "const sessionId = pm.environment.get('mcp_session_id');",
              "if (!sessionId) {",
              "    console.log('‚ö†Ô∏è No session ID - run Initialize first');",
              "    return;",
              "}",
              "",
              "// Set timeout",
              "pm.request.timeout = parseInt(pm.environment.get('mcp_timeout') || '10000');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "try {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.result && jsonData.result.content) {",
              "        const content = jsonData.result.content[0];",
              "        if (content.text) {",
              "            const data = JSON.parse(content.text);",
              "            console.log('üìä Found', data.total_count, 'of your repositories');",
              "            console.log('üìã Showing', data.items.length, 'repositories (by stars):');",
              "            data.items.forEach((repo, index) => {",
              "                console.log(`${index + 1}. ${repo.full_name} (${repo.language || 'No language'})`);",
              "                console.log(`   Stars: ${repo.stargazers_count}, Forks: ${repo.forks_count}`);",
              "            });",
              "        }",
              "    }",
              "} catch (error) {",
              "    console.log('‚ùå Error parsing response:', error.message);",
              "}",
              "",
              "// Check response time",
              "const responseTime = pm.response.responseTime;",
              "console.log('‚è±Ô∏è Response time:', responseTime + 'ms');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get My Repos (10) - MCP Optimized",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 5,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"search_repositories\",\n    \"arguments\": {\n      \"query\": \"user:{{github_username}}\",\n      \"perPage\": 10,\n      \"sort\": \"created\",\n      \"order\": \"desc\"\n    }\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Check if we have a session ID",
              "const sessionId = pm.environment.get('mcp_session_id');",
              "if (!sessionId) {",
              "    console.log('‚ö†Ô∏è No session ID - run Initialize first');",
              "    return;",
              "}",
              "",
              "// Set timeout",
              "pm.request.timeout = parseInt(pm.environment.get('mcp_timeout') || '10000');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "try {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.result && jsonData.result.content) {",
              "        const content = jsonData.result.content[0];",
              "        if (content.text) {",
              "            const data = JSON.parse(content.text);",
              "            console.log('üìä Found', data.total_count, 'of your repositories');",
              "            console.log('üìã Showing', data.items.length, 'repositories:');",
              "            data.items.forEach((repo, index) => {",
              "                console.log(`${index + 1}. ${repo.full_name} (${repo.language || 'No language'})`);",
              "                console.log(`   Created: ${repo.created_at}, Stars: ${repo.stargazers_count}`);",
              "            });",
              "        }",
              "    }",
              "} catch (error) {",
              "    console.log('‚ùå Error parsing response:', error.message);",
              "}",
              "",
              "// Check response time",
              "const responseTime = pm.response.responseTime;",
              "console.log('‚è±Ô∏è Response time:', responseTime + 'ms');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get User Info - MCP Optimized",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{github_token}}",
            "type": "text"
          },
          {
            "key": "Mcp-Session-Id",
            "value": "{{mcp_session_id}}",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 6,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_me\",\n    \"arguments\": {}\n  }\n}"
        },
        "url": {
          "raw": "https://api.githubcopilot.com/mcp/",
          "protocol": "https",
          "host": ["api", "githubcopilot", "com"],
          "path": ["mcp", ""]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Check if we have a session ID",
              "const sessionId = pm.environment.get('mcp_session_id');",
              "if (!sessionId) {",
              "    console.log('‚ö†Ô∏è No session ID - run Initialize first');",
              "    return;",
              "}",
              "",
              "// Set timeout",
              "pm.request.timeout = parseInt(pm.environment.get('mcp_timeout') || '10000');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "try {",
              "    const jsonData = pm.response.json();",
              "    if (jsonData.result && jsonData.result.content) {",
              "        const content = jsonData.result.content[0];",
              "        if (content.text) {",
              "            const data = JSON.parse(content.text);",
              "            console.log('üë§ User Info:');",
              "            console.log('   Login:', data.login);",
              "            console.log('   ID:', data.id);",
              "            console.log('   Name:', data.name || 'N/A');",
              "            console.log('   Email:', data.email || 'N/A');",
              "        }",
              "    }",
              "} catch (error) {",
              "    console.log('‚ùå Error parsing response:', error.message);",
              "}",
              "",
              "// Check response time",
              "const responseTime = pm.response.responseTime;",
              "console.log('‚è±Ô∏è Response time:', responseTime + 'ms');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
