{
  "info": {
    "name": "Official Filesystem MCP Server (HTTP)",
    "description": "Official filesystem MCP server from the Model Context Protocol repository with HTTP wrapper for Postman integration.\n\nüîß **Setup Instructions:**\n1. Run the HTTP wrapper setup: npm run setup-http-filesystem-mcp\n2. Start the HTTP server: npm run start-http-filesystem-mcp\n3. Import this collection and test the endpoints\n\n‚úÖ **Available Tools (Official Server):**\n- read_text_file - Read file contents as text\n- read_media_file - Read image/audio files (base64)\n- read_multiple_files - Read multiple files simultaneously\n- write_file - Write content to file\n- edit_file - Make selective edits with pattern matching\n- create_directory - Create directory\n- list_directory - List directory contents\n- move_file - Move/rename files and directories (no deletion support)\n- search_files - Search for files by partial name (case-insensitive)\n- get_file_info - Get detailed file metadata\n- list_allowed_directories - List accessible directories\n\nüîí **Security Features:**\n- Directory access control via configuration file\n- Dynamic directory updates via MCP Roots protocol\n- Path validation and security checks\n- Sandboxed operations within allowed directories\n- No file deletion support (security feature)\n\nüåê **HTTP Endpoints:**\n- GET /health - Health check\n- GET /config - Configuration info\n- POST /mcp - MCP protocol endpoint\n- POST /tools/call - Tool call endpoint\n- GET /tools - List available tools\n\nüìÅ **Configurable Paths:**\n- **Collection Variables**: Modify in Postman for different test paths\n- **Server Configuration**: Edit ~/.mcp-servers/filesystem-mcp-config.env\n- **Interactive Setup**: Run ./configure-filesystem-mcp.sh for guided setup\n- **Default Directories**: /tmp, ~/Desktop (configurable)\n- **Management**: ./start-http-filesystem-mcp.sh, ./stop-http-filesystem-mcp.sh",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_path",
      "value": "/private/tmp",
      "type": "string"
    },
    {
      "key": "test_file_path",
      "value": "/private/tmp/test-file.txt",
      "type": "string"
    },
    {
      "key": "test_directory_path",
      "value": "/private/tmp/test-directory",
      "type": "string"
    },
    {
      "key": "desktop_path",
      "value": "/Users/arungupta/Desktop",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3002/health",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["health"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        console.log('‚úÖ Health check successful');",
              "        console.log('   Status:', response.status);",
              "        console.log('   MCP Server:', response.mcpServer);",
              "        console.log('   Timestamp:', response.timestamp);",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "2. Show Configuration",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3002/config",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["config"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        console.log('‚úÖ Configuration retrieved');",
              "        console.log('   Allowed directories:', response.allowedDirectories);",
              "        console.log('   Config file:', response.configFile);",
              "        ",
              "        if (response.allowedDirectories && response.allowedDirectories.length > 0) {",
              "            console.log('   üìÅ Accessible directories:');",
              "            response.allowedDirectories.forEach(dir => {",
              "                console.log('      - ' + dir);",
              "            });",
              "        }",
              "        ",
              "        console.log('\\nüí° To change allowed directories:');",
              "        console.log('   1. Run: ./configure-filesystem-mcp.sh');",
              "        console.log('   2. Or edit the config file directly');",
              "        console.log('   3. Restart the server to apply changes');",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "3. List Available Tools",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:3002/tools",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.tools) {",
              "            console.log('‚úÖ Available tools:', response.result.tools.length, 'tools');",
              "            response.result.tools.forEach(tool => {",
              "                console.log('   üîß ' + tool.name + ' - ' + tool.description);",
              "            });",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "4. List Allowed Directories",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"list_allowed_directories\",\n  \"arguments\": {}\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            const text = response.result.content[0].text;",
              "            console.log('‚úÖ Allowed directories retrieved');",
              "            console.log('   Content:', text);",
              "            ",
              "            // Parse the text to extract directory list",
              "            const lines = text.split('\\n');",
              "            const directories = lines.filter(line => line.startsWith('/'));",
              "            console.log('   üìÅ Found', directories.length, 'allowed directories:');",
              "            directories.forEach(dir => {",
              "                console.log('      - ' + dir);",
              "            });",
              "            ",
              "            console.log('\\nüí° To change allowed directories, restart the server with:');",
              "            console.log('   npm run start-http-filesystem-mcp /path/to/dir1 /path/to/dir2');",
              "            console.log('   Example: npm run start-http-filesystem-mcp /private/tmp /Users/username/Desktop');",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "5. List Directory Contents (Private TMP)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"list_directory\",\n  \"arguments\": {\n    \"path\": \"{{base_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            const content = response.result.content[0].text;",
              "            console.log('‚úÖ Directory contents retrieved for {{base_path}}');",
              "            console.log('   Content:', content);",
              "            ",
              "            // Try to parse as JSON if it's a structured response",
              "            try {",
              "                const items = JSON.parse(content);",
              "                if (Array.isArray(items)) {",
              "                    console.log('   üìÅ Found', items.length, 'items:');",
              "                    items.forEach(item => {",
              "                        const type = item.type || 'unknown';",
              "                        const name = item.name || item.path || 'unnamed';",
              "                        console.log('      ' + (type === 'directory' ? 'üìÅ' : 'üìÑ') + ' ' + name);",
              "                    });",
              "                }",
              "            } catch (parseError) {",
              "                // If not JSON, treat as plain text",
              "                console.log('   üìÑ Plain text response');",
              "            }",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "6. List Directory Contents (Desktop)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"list_directory\",\n  \"arguments\": {\n    \"path\": \"{{desktop_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            const content = response.result.content[0].text;",
              "            console.log('‚úÖ Desktop directory contents retrieved');",
              "            console.log('   Content:', content);",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "7. Write Test File",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"write_file\",\n  \"arguments\": {\n    \"path\": \"{{test_file_path}}\",\n    \"content\": \"Hello from Postman! This is a test file created for filesystem MCP testing.\\n\\nCreated at: {{$timestamp}}\\nFile path: {{test_file_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate timestamp for the test file in local timezone",
              "const now = new Date();",
              "const timestamp = now.toLocaleString();",
              "const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;",
              "const fileContent = `Hello from Postman! This is a test file created for filesystem MCP testing.\\n\\nCreated at: ${timestamp} (${timezone})\\nFile path: {{test_file_path}}\\n\\nThis file was created by the HTTP Filesystem MCP Server integration test.`;",
              "",
              "// Update the request body with the timestamp",
              "const requestBody = {",
              "    name: \"write_file\",",
              "    arguments: {",
              "        path: \"{{test_file_path}}\",",
              "        content: fileContent",
              "    }",
              "};",
              "",
              "pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
              "console.log('üìù Generated test file content with timestamp:', timestamp);"
            ],
            "type": "text-javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            console.log('‚úÖ Test file written successfully');",
              "            console.log('   Path:', '{{test_file_path}}');",
              "            console.log('   Content:', response.result.content[0].text);",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "8. Read Test File",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"read_text_file\",\n  \"arguments\": {\n    \"path\": \"{{test_file_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            console.log('‚úÖ Test file read successfully');",
              "            console.log('   Path:', '{{test_file_path}}');",
              "            console.log('   Content:', response.result.content[0].text);",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "9. Get File Information",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"get_file_info\",\n  \"arguments\": {\n    \"path\": \"{{test_file_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            const fileInfo = JSON.parse(response.result.content[0].text);",
              "            console.log('‚úÖ File information retrieved');",
              "            console.log('   Path:', fileInfo.path);",
              "            console.log('   Size:', fileInfo.size, 'bytes');",
              "            console.log('   Type:', fileInfo.type);",
              "            console.log('   Modified:', fileInfo.modified);",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "10. Create Test Directory",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"create_directory\",\n  \"arguments\": {\n    \"path\": \"{{test_directory_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            console.log('‚úÖ Test directory created successfully');",
              "            console.log('   Path:', '{{test_directory_path}}');",
              "            console.log('   Result:', response.result.content[0].text);",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "11. Search for Test Files",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"search_files\",\n  \"arguments\": {\n    \"path\": \"{{base_path}}\",\n    \"pattern\": \"test\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            const content = response.result.content[0].text;",
              "            console.log('‚úÖ Search completed');",
              "            console.log('   Pattern: test (partial name match)');",
              "            console.log('   Content:', content);",
              "            ",
              "            // Try to parse as JSON if it's a structured response",
              "            try {",
              "                const files = JSON.parse(content);",
              "                if (Array.isArray(files)) {",
              "                    console.log('   üìÑ Found', files.length, 'files:');",
              "                    files.forEach(file => {",
              "                        console.log('      - ' + file);",
              "                    });",
              "                }",
              "            } catch (parseError) {",
              "                // If not JSON, treat as plain text (e.g., 'No matches found')",
              "                console.log('   üìÑ Search result:', content);",
              "            }",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "12. Show Test File Metadata",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"get_file_info\",\n  \"arguments\": {\n    \"path\": \"{{test_file_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            const fileInfo = JSON.parse(response.result.content[0].text);",
              "            console.log('‚úÖ Test file verification completed');",
              "            console.log('   Path:', fileInfo.path);",
              "            console.log('   Size:', fileInfo.size, 'bytes');",
              "            console.log('   Type:', fileInfo.type);",
              "            console.log('   Modified:', fileInfo.modified);",
              "            console.log('\\nüí° Note: File deletion is not supported by this MCP server.');",
              "            console.log('   Files created during testing will remain in the filesystem.');",
              "            console.log('   You can manually delete them if needed.');",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    },
    {
      "name": "13. Show Test Directory Contents",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"name\": \"list_directory\",\n  \"arguments\": {\n    \"path\": \"{{test_directory_path}}\"\n  }\n}"
        },
        "url": {
          "raw": "http://localhost:3002/tools/call",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3002",
          "path": ["tools", "call"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    try {",
              "        const response = pm.response.json();",
              "        if (response.result && response.result.content) {",
              "            const content = response.result.content[0].text;",
              "            console.log('‚úÖ Test directory verification completed');",
              "            console.log('   Path:', '{{test_directory_path}}');",
              "            console.log('   Content:', content);",
              "            console.log('\\nüí° Note: Directory deletion is not supported by this MCP server.');",
              "            console.log('   Directories created during testing will remain in the filesystem.');",
              "            console.log('   You can manually delete them if needed.');",
              "        }",
              "    } catch (error) {",
              "        console.log('‚ö†Ô∏è Error parsing response:', error.message);",
              "    }",
              "}"
            ],
            "type": "text-javascript"
          }
        }
      ]
    }
  ]
}
