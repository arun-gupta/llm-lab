name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for main app
      id: meta-app
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for gRPC server
      id: meta-grpc
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-grpc
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for gRPC-Web proxy
      id: meta-grpc-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-grpc-web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for filesystem MCP
      id: meta-filesystem-mcp
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-filesystem-mcp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push main app image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-app.outputs.tags }}
        labels: ${{ steps.meta-app.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push gRPC server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./grpc-server/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-grpc.outputs.tags }}
        labels: ${{ steps.meta-grpc.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push gRPC-Web proxy image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.grpc-web-proxy
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-grpc-web.outputs.tags }}
        labels: ${{ steps.meta-grpc-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push filesystem MCP image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.filesystem-mcp
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-filesystem-mcp.outputs.tags }}
        labels: ${{ steps.meta-filesystem-mcp.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test main app container health
      run: |
        # Start container and test health endpoint
        docker run -d --name test-container -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sleep 10
        curl -f http://localhost:3000/api/health || exit 1
        docker stop test-container
        docker rm test-container

  test-collections:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install Newman
      run: npm install -g newman

    - name: Install Newman HTML reporter
      run: npm install -g newman-reporter-html

    - name: Start application for testing
      run: |
        # Start the application in background
        docker run -d --name app-test -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        # Wait for app to be ready
        sleep 15
        curl -f http://localhost:3000/api/health || exit 1

    - name: Run all collection tests
      run: |
        # Run all collections using the test script
        ./scripts/test-collections.sh || echo "Some collection tests failed but continuing..."

    - name: Upload Newman reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: newman-test-reports
        path: newman-reports/
        retention-days: 30

    - name: Cleanup test container
      if: always()
      run: |
        docker stop app-test || true
        docker rm app-test || true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, test-collections, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: kubectl apply, docker-compose, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, test-collections, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: kubectl apply, docker-compose, etc.
